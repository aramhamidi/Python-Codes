git diff <Commit ID old> <Commit ID new>
	Compare two commits, printing each line that is present in one commit but not the other.
	git diff will do this. It takes two arguments - the two commit ids to compare.
	git diff considers the first argument as the "original", and the second argument
	as the "new" version, so additions are lines present in the second argument but
	not the first. this command is comparing commits inside the repository not local
	working directory.


git clone
	Make a copy of an entire Git repository, including the history, onto your own computer.
	git clone will do this. It takes one argument - the url of the repository to copy. 
	The history of changes to the directory or repository is copied.
	The state of every file in the directory or repository is copied.


git checkout
	Temporarily reset all files in a directory to their state at the time of a specific commit.
	git checkout will do this. It takes one argument - the commit ID to restore. 
	Also if your HEAD is 'detached' from when you checked out an old commit you can fix that,by
	runing the command git checkout master. 
	You can checkout a branch using this command just like checkout a commit, but each branch 
	has a more human friendly name rather than a ID.


git log (--graph) (--online) (branch name1) (branch name2) ...(branch name n)
	Show the commits made in this repository, starting with the most recent.
	git log will do this. It doesn't take any arguments.
	(--graph) Shows it as a graph
	(--online) makes it more shorter
	(branchnames) provides logs of those branches only.

git diff
	Compares the files that are staged with the files in working directory. No arguments
	should be provided.

git diff --stage
	Compares the files in staging area with the most recent commit in repository.

git reset --hard
	Disgards all the changes you made in files of your local working directory AND the
	staging area. 
	NOTE: Be very careful using this command, it is undoable! Cause you will lose all the
	changes you made in local working directory and staging area. Those changes were not 
	commited yet, so git doesn't have a snapshot of them. you do git reset --hard, you lose
	the changes for ever.

git branch
	Shows all the current branches.

git branch <New Branch Name>
	Creates a new branch named "New Branch Name"

git checkout -b <New Branch Name>
	this command combines two commands: 
		git branch <New Branch Name>
		git checkout <New Branch Name>

git gc
	If a branch is deleted and leaves some commits unreachable from existing branches, those
	commits will continue to be accessible by commit id, until Gitâ€™s garbage collection runs.
	This will happen automatically from time to time, unless you actively turn it off.
	You can also run this process manually with git gc.

git merge <branch1> <branch2>
	This command merges branch 2 into branch 1. The order doesn't matter.The key is to remember
	that git merge always merges all the specified branches into the currently checked out branch,
	creating a new commit for that branch.
	If you have already checked out branch1, you can easily say git merge branch2 to do the
	same thing. but it is always a good idea to use both, just to know what branch you are
	merging into which branch.
	Commits from branch2 will be reachable from branch1. After the merge the HEAD is on branch1.
	Merge creates a new commit(Node) with multiple parents, and the label will be the one that 
	you have checked out! That is why sometimes HEAD can be ahead of master I guess.

git show commit_id
	The command is to compare a commit to its parent.

git remote
	shows the remote repository for the local repo you are in. If there is no remote, nothing
	will be the output.

git remote <remote_repo_name> <URL of remote repo>
	it adds the github repo, as the remote repo for the local repo you are currently in.
	Commonly if you have only one remote for the repo, we name it "origin". You only
	need to add a remote repo for repositories that you create on your local machine
	for the first time. 
	If you clone a repo, Github automatically creates a pointer to point to the remote 
	repository you cloned it from, named origin.

git rmeote -v 
	'v' stands for vebose and means that git remote outputs more information,
	such as the origin(remote repo) URL.

git push <name of remote repository> <local_branch_name>
	it pushes all the commits in local repo to the remote repo on Github.

git pull <Name of remote Repo> <name of the branch on remote repo>
	pulls all the commits in remote repo (usually origin) on specific branch of it (usually master). remote repo on git hub can also have multiple branches, you need to 
	specify which one you want to pull from. 
	when you pull, the label of head will be updated to the master*  

	Note: git pull origin master == (git fetch origin + then git merge master origin/master)

git fork
	This allows one to clone someone's repo from Github, on Github server, without 
	copying it to one's local machine! This way, the copied version's origin will
	always be recognizable! It is the right thing to do when collaborating or using
	someone else's code.
	Later we can clone the forked repo, from our own github repo to our local repo.
	Github will keep track of number of people who have forked your repo. All of the
	forks are linking back to the original repo.

	Note: Branches happen on a single Repository. It can be on github or local machin.
	Fork: fork only happens on Github server. It doesn't have anything to do with local
		repos. 
	Clone: Clone on the other hand is simply copy. this copy can be made from a Github
		repo to a local repo, or from a local repo to another local repo. Basically
		clone can be done between any two repos.

Note: When you setup a remote, Github stores local copies of all the remote branches, 
which each contains the state of remote branches as of the last time you pushed/pulled
the branch.

git fetch <remote repo>
	you can update just the local copy of remote/branch (and leaving your actual local
	copy alone) by fetch. fetch is going to download all the new changes from remote/branch
	then you can use get log and get diff to see what has been changed between your
	local master branch and remote(origin) branch(master). Now you can use git merge to 
	combine all these changes together on your local branches!

	Remember:git pull origin master == (git fetch origin + then git merge master origin/master

	After git fetch, your branch will point to the lates commit on remote branch(origin/master) commit in a new node. And your local master branch will point at your lates local
	commit! Cause you haven't merged yet! At this point if you run "git status" git will tell 
	you that your branch is "out_of_sync" with remote branch(origin/master)

Not: Fast Forward merging happens when you merge to commits that one is the ancestor of the 
the other. Or one commit is reachable by the other.
				Node <--- NodeA <--- NodeB
				git merge NodeA NodeB
				Node <--- NodeA <--- NodeB
							^		  ^	
							|_________|______NodeA (Now it has both commits as a parent
											        However, NodeB already has all the
											        history of NodeA so we dont need to
											        add the new NodeA, we just update 
											        label of NodeA to point to NodeB 
											        instead!)
				Node <--- NodeA <--- NodeB,A
